#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Linq basic concepts

LINQ (Language-Integrated Query) is a feature in C# that allows you to write expressive code for querying and manipulating data. 
It can be used with various data sources like arrays, collections, databases, XML, and more.

#### Key Concepts:

1. **Queries:** LINQ queries are similar to SQL queries but are integrated into C#. They allow you to filter, sort, transform, and aggregate data.

2. **Extension Methods:** LINQ provides extension methods for the `IEnumerable<T>` and `IQueryable<T>` interfaces. These methods can be used to perform operations like `Where`, `Select`, `OrderBy`, `GroupBy`, and many more.

3. **Deferred Execution:** Many LINQ operations use deferred execution, meaning that the query is not executed until you iterate over the results (e.g., using a `foreach` loop).

4. **Anonymous Types:** LINQ often uses anonymous types to store the results of select queries. These are types generated by the compiler that contain properties you specify in your query.

5. **Lambda Expressions:** These are often used in LINQ queries to specify conditions or transformations. They are inline functions defined by `=>` syntax.

#### Example Usage:

#!markdown

Consider a simple array of integers:

#!csharp

int[] numbers = { 1, 2, 3, 4, 5 };
numbers

#!markdown

Filtering Data (using Where):

#!csharp

var evenNumbers = numbers.Where(n => n % 2 == 0);
evenNumbers

#!markdown

Transforming Data (using Select):

#!csharp

var squaredNumbers = numbers.Select(n => n * n);
squaredNumbers

#!markdown

Sorting Data (using OrderBy):

#!csharp

var sortedNumbers = numbers.OrderBy(n => n);
sortedNumbers

#!markdown

Grouping Data (using GroupBy):

#!csharp

var numberGroups = numbers.GroupBy(n => n % 2 == 0 ? "Even" : "Odd");
numberGroups

#!markdown

Combining Operations:

#!csharp

var complexQuery = numbers.Where(n => n > 2).OrderByDescending(n => n).Select(n => n * n);
complexQuery

#!markdown

# Cheetsheet

Reference doc [here](https://vslapp.files.wordpress.com/2011/11/linq-cheatsheet.pdf)

Initilizing

#!csharp

public class Customer
{
    public int CustomerID { get; set; }
    public string Name { get; set; }
}

public class Order
{
    public int OrderID { get; set; }
    public int CustomerID { get; set; }
    public decimal Cost { get; set; }
}

var customers = new List<Customer>
{
    new Customer { CustomerID = 1, Name = "Alice Antiques" },
    new Customer { CustomerID = 2, Name = "Bob Burgers" },
    new Customer { CustomerID = 3, Name = "Smith James" },
    new Customer { CustomerID = 4, Name = "Jolly Rodgers" },
    new Customer { CustomerID = 5, Name = "Jack Allice" },
    new Customer { CustomerID = 6, Name = "Ram Nivas" },
    new Customer { CustomerID = 7, Name = "Ravi Shanker" },
    new Customer { CustomerID = 8, Name = "Alice Blobs" },
    new Customer { CustomerID = 9, Name = "Jami Johns" },
    new Customer { CustomerID = 10, Name = "Fluff Rodger" }
    
};

var orders = new List<Order>
{
    new Order { CustomerID = 1, OrderID = 1, Cost = 250.00m },
    new Order { CustomerID = 1, OrderID = 2, Cost = 750.00m },
    new Order { CustomerID = 1, OrderID = 3, Cost = 234.00m },

    new Order { CustomerID = 2, OrderID = 4, Cost = 580.00m },
    new Order { CustomerID = 2, OrderID = 5, Cost = 785.00m },
    new Order { CustomerID = 2, OrderID = 6, Cost = 687.00m },
    new Order { CustomerID = 2, OrderID = 7, Cost = 189.00m },

    new Order { CustomerID = 3, OrderID = 8, Cost = 325.00m },
    new Order { CustomerID = 3, OrderID = 9, Cost = 195.00m },
    new Order { CustomerID = 3, OrderID = 10, Cost = 235.00m },
    new Order { CustomerID = 3, OrderID = 11, Cost = 387.00m },
    new Order { CustomerID = 3, OrderID = 12, Cost = 102.00m },

    new Order { CustomerID = 4, OrderID = 13, Cost = 10.00m },
    new Order { CustomerID = 4, OrderID = 14, Cost = 75.00m },
    new Order { CustomerID = 4, OrderID = 15, Cost = 93.00m },
    new Order { CustomerID = 4, OrderID = 16, Cost = 1250.00m },
    new Order { CustomerID = 4, OrderID = 17, Cost = 587.00m },
    new Order { CustomerID = 4, OrderID = 18, Cost = 985.00m },

    new Order { CustomerID = 5, OrderID = 19, Cost = 6225.00m },
    new Order { CustomerID = 5, OrderID = 20, Cost = 748.00m },

    new Order { CustomerID = 6, OrderID = 21, Cost = 587.00m },
    new Order { CustomerID = 6, OrderID = 22, Cost = 369.00m },
    new Order { CustomerID = 6, OrderID = 23, Cost = 753.00m },
    new Order { CustomerID = 6, OrderID = 24, Cost = 357.00m },

    new Order { CustomerID = 7, OrderID = 25, Cost = 8977.00m },
    new Order { CustomerID = 7, OrderID = 26, Cost = 987.00m },
    new Order { CustomerID = 7, OrderID = 27, Cost = 654.00m },

    new Order { CustomerID = 8, OrderID = 28, Cost = 456.00m },
    new Order { CustomerID = 8, OrderID = 29, Cost = 123.00m },
    new Order { CustomerID = 8, OrderID = 30, Cost = 321.00m },
    new Order { CustomerID = 8, OrderID = 31, Cost = 4567.00m },
    new Order { CustomerID = 8, OrderID = 32, Cost = 897.00m },
    new Order { CustomerID = 8, OrderID = 33, Cost = 658.00m },
    new Order { CustomerID = 8, OrderID = 34, Cost = 789.00m },

    new Order { CustomerID = 9, OrderID = 35, Cost = 753.00m },
    new Order { CustomerID = 9, OrderID = 36, Cost = 357.00m },
    new Order { CustomerID = 9, OrderID = 37, Cost = 159.00m },
    new Order { CustomerID = 9, OrderID = 38, Cost = 78954.00m },
    new Order { CustomerID = 9, OrderID = 39, Cost = 1258.00m },
    new Order { CustomerID = 9, OrderID = 40, Cost = 3698.00m },
    new Order { CustomerID = 9, OrderID = 41, Cost = 7854.00m },
    new Order { CustomerID = 9, OrderID = 42, Cost = 5874.00m },
    new Order { CustomerID = 9, OrderID = 43, Cost = 35.00m },
    new Order { CustomerID = 9, OrderID = 44, Cost = 147.00m },
    new Order { CustomerID = 9, OrderID = 45, Cost = 3587.00m },
};

#!markdown

### Filtering

#!csharp

var filteringLambdaSyntax = orders.Where(o => o.CustomerID == 8);

filteringLambda.Display("application/json");    // for output

var filteringQuerySyntax = from o in orders
          where o.CustomerID == 8
          select o;

#!markdown

### Return Anonymous Type

#!csharp

var returnAnonymousTypeLambdaSyntax =  orders.Select(o => new        
        {           
            OrderID = o.OrderID,            
            Cost = o.Cost       
        }     
    );

    returnAnonymousTypeLambdaSyntax.Display("application/json");

var returnAnonymousTypeQuerySyntax =   from o in orders          
            select new            
            {                
                OrderID = o.OrderID,                
                Cost = o.Cost            
            };

#!markdown

### Ordering

#!csharp

var orderByCostAscendingInLambdaSyntax = orders.OrderBy(o => o.Cost); 

orderByCostAscendingInLambdaSyntax.Display("application/json");

var orderByCostAscendingInQuerySyntax = from o in orders           
                                        orderby o.Cost ascending           
                                        select o; 

#!csharp

var orderByCostDescendingInLambdaSyntax = orders.OrderByDescending(o => o.Cost); 

orderByCostDescendingInLambdaSyntax.Display("application/json");

var orderByCostDescendingInQuerySyntax = from o in orders           
                                        orderby o.Cost descending           
                                        select o; 

#!csharp

var orderByCustomerDescendingThenByCostDecendingInLambdaSyntax =    orders.OrderBy(o => o.CustomerID).     
                                                                    ThenByDescending(o => o.Cost);

orderByCustomerDescendingThenByCostDecendingInLambdaSyntax.Display("application/json");

var orderByCustomerDescendingThenByCostDescendingInQuerySyntax = from o in orders   
                                                                orderby o.CustomerID, o.Cost descending            
                                                                select o; 

#!markdown

### Joining

#!csharp

var joiningLambdaSyntax = customers.Join(orders,      
            c => c.CustomerID,o => o.CustomerID,      
            (c, o) => new          
                {              
                    c.CustomerID,              
                    c.Name,              
                    o.OrderID,              
                    o.Cost          
                }     
            );

var joiningQuerySyntax =    from c in customers           
                            join o in orders on            
                            c.CustomerID equals o.CustomerID           
                            select new            
                            {               
                                c.CustomerID,
                                c.Name,                
                                o.OrderID,                
                                o.Cost           
                            }; 

joiningQuerySyntax

#!markdown

### Grouping

#!csharp

var customerOrderCountLambdaSyntax = orders.GroupBy(          
            o => o.CustomerID).          
            Select(g => new           
            {               
                CustomerID = g.Key,               
                TotalOrders = g.Count()           
            });

var customerOrderCountQuerySyntax = from o in orders         
                                    group o by o.CustomerID into g         
                                    select new         
                                    {             
                                        CustomerID = g.Key,             
                                        TotalOrders = g.Count()         
                                    }; 

customerOrderCountQuerySyntax

#!markdown

### Paging (using Skip & Take) 

#!csharp

var selectTop3InLambdaSyntax = orders.Where(o => o.CustomerID == 8).Take(3);

var selectTop3InQuerySyntax =   (from o in orders
            where o.CustomerID == 8            
            select o).Take(3); 

selectTop3InQuerySyntax.Display("application/json");

#!csharp

var skipFirst2AndReturn2AfterInLambdaSyntax = orders.Where(o => o.CustomerID == 8).Skip(2).Take(2);

var skipFirst2AndReturn2AfterInQuerySyntax = (from o in orders            
                                            where o.CustomerID == 8            
                                            orderby o.Cost            
                                            select o).Skip(2).Take(2); 

skipFirst2AndReturn2AfterInQuerySyntax
